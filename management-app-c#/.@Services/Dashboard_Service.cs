using ngx_docs_managment_application._Forms;
using ngx_docs_managment_application._Services;
using System;
using System.IO;
using System.Text;
using System.Windows.Forms;

namespace ngx_docs_managment_application._Controllers
{
    class Dashboard_Service
    {
        readonly Settings_Service settings = new Settings_Service();


        /// <summary>
        /// Verify that folder path is set and exists
        /// </summary>
        /// <returns>True if folder exists false if folder does not exist</returns>
        public bool VerifyProjectFolder()
        {
            try
            {


                string folder_path = settings.getSetting("project_path");

                if (string.IsNullOrEmpty(folder_path)) { return false; }

                if (string.IsNullOrWhiteSpace(folder_path)) { return false; }

                if (!Directory.Exists(folder_path)) { return false; }

                if(!File.Exists(folder_path + "\\package.json")){ return false; }

                Logger_Service.Add("DASHBOARD_SERVICE|VerifyProjectFolder", "Folder verified!");

                return true;
            }
            catch (Exception e)
            {
                Logger_Service.Add("DASHBOARD_SERVICE|VerifyProjectFolder", e.Message);
                return false;
            }
        }

        /// <summary>
        /// Function to generate sample input.json
        /// </summary>
        public void GenerateSampleInput()
        {
            if (!confirmation("Overwrite input.json?")) { return; }
            string folder_path = settings.getSetting("project_path");
            string sample_file = "";
            byte[] data = Convert.FromBase64String(sample_file);
            string decodedString = Encoding.UTF8.GetString(data);
            File.WriteAllText(folder_path + "\\src\\input.json", decodedString);
            return;
        }

        /// <summary>
        /// Function to generate sample settings.json
        /// </summary>
        public void GenerateSampleSettings()
        {
            if (!confirmation("Overwrite settings.json?")) { return; }
            string folder_path = settings.getSetting("project_path");
            string sample_file = "WwogICAgewogICAgICAicHJldmlld19zaG93X3BpY3R1cmUiOiB0cnVlLAogICAgICAicHJldmlld19zaG93X3RpdGxlIjogdHJ1ZSwKICAgICAgInByZXZpZXdfc2hvd19kZXNjcmlwdGlvbiI6IHRydWUsCiAgICAgICJwcmV2aWV3X3Nob3dfdGV4dCI6IHRydWUsCiAgICAgICJwcmV2aWV3X3Nob3dfaXRlbXMiOiB0cnVlLAogICAgICAicHJldmlld19zaG93X3VybCI6IGZhbHNlLAogICAgICAicHJldmlld19zaG93X2FsYnVtIjogZmFsc2UsCiAgICAgICJwcmV2aWV3X3Nob3dfdGFncyI6IGZhbHNlLAogICAgICAicHJldmlld19kZXNjcmlwdGlvbl90ZXh0X2xlbmd0aCIgOiAxNSwKICAgICAgInByZXZpZXdfdGV4dF9sZW5ndGgiOiAxNSwKICAgICAgInByZXZpZXdfaXRlbV90ZXh0X2xlbmd0aCI6IDUsCiAgICAgICJwcmV2aWV3X2l0ZW1zX2NvdW50IjogMiwKICAgICAgInByZXZpZXdfbnVtYmVyX29mX2NvbHVtbnMiOiA0CiAgICB9Cl0=";
            byte[] data = Convert.FromBase64String(sample_file);
            string decodedString = Encoding.UTF8.GetString(data);
            File.WriteAllText(folder_path + "\\src\\settings.json", decodedString);
            return;
        }


        /// <summary>
        /// Simple confirmation messagebox
        /// </summary>
        /// <param name="message">The message to display</param>
        /// <returns></returns>
        private bool confirmation(string message)
        {
            DialogResult dr = MessageBox.Show(message, "Are you sure?", MessageBoxButtons.YesNoCancel,
        MessageBoxIcon.Information);

            if (dr == DialogResult.Yes)
            {
                return true;
            }

            return false;
        }
    }
}
